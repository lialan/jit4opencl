#include "tree.hpp"
#include <string>
#include <iostream>
#include <sstream>
#include <map>
#include <boost/timer.hpp>

typedef struct CompilationInstruction_ {
	int ndim; //number of dimensions
	int dimsize[3]; //each dimension's size
	int ngriddim; // grid's dimension
	int griddimsize[3];//grid's dimension's size
	
	

} CompilationInstruction;


static string OCLCompileTree(Tree *tree,BackendInfo *info){
	stringstream ss;
	
	//just compile program;
	OCLGenKernel(tree, info, ss);
	
	return ss;
}

/*	Here we need to generate kernel parameters, which should include:
	1. global memory array pointers
	2. shared memory allocated pointers;
	3. Other primitive parameters
*/
static string OCLGenParameters(Tree *tree, BackendInfo *info){

}

/* Loading strategy requires calculation of the LMAD function.
*/
static string OCLGenMemoryLoad(Tree *tree, BackendInfo *info){

}
/* Generating Body code with loop unrolling.*/
static string OCLGenBody(Tree *tree, BackendInfo *info, CompilationInstruction *ci){

}

/*
*/
static string OCLGenGlobalStore(Tree *tree, BackendInfo *info, CompilationInstruction *ci){

}

static string OCLGenTail(Tree *tree, BackendInfo *info){
	return "}";
}

static string OCLGenKernel(Tree *tree, BackendInfo *info, int loopvar[], stringstream &ss){

	//first, generate header
	ss<<"#include <CL/cl.h>"<<"\n"<<;
	ss<<"//generated by Unpython.\n";
	ss<<"\n";
	
	
	ss<<"__kernel void OpenCLKernel(";
	
	
	
	//second, generate ID getters. Info from BackendInfo
	
	
	//third, generate memory load
	
	
	//forth, generate body
	
	
	//fifth, generate store
	
	
	//last, generate tails
	ss << OCLGenTail(tree, info);
	
	string result;
	ss>>result;
	return result;
}

//also we need to do register counting, should the tree be lowered to 3 address?


